{"version":3,"sources":["StaticText.js"],"names":["define","Vector2","Widget","texts","StaticText","inherit","_construct","parent","prototype","call","this","skin","getSkin","_elm","style","pointerEvents","color","textColor","display","span","document","createElement","overflow","appendChild","text","createTextNode","fitContent","allowWordBreak","setVerticalAlignment","Text","CENTER","setAlignment","setFont","fontFamily","fontWeight","fontStyle","undefined","value","whiteSpace","wordBreak","setText","data","setTextBorder","size","textShadow","setTextSize","fontSize","setTextColor","setOverflow","ELLIPSIS","textOverflow","align","justifyContent","textAlign","LEFT","RIGHT","alignItems","TOP","BOTTOM","measure","offsetWidth","offsetHeight","setMargin","margin","_updateVisibility","visible","_updateSize","x","clientWidth","y","clientHeight","CLIP"],"mappings":"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","file":"../StaticText.js","sourcesContent":["define([\r\n\t\"skylark-langx-numbers/Vector2\",\r\n\t\"skylark-widgets-base/Widget\",\r\n\t\"./texts\"\r\n],function(\r\n\tVector2,\r\n\tWidget,\r\n\ttexts\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Text element without background.\r\n\t * \r\n\t * @class Text\r\n\t * @extends {Widget}\r\n\t * @param {Widget} parent Parent widget.\r\n\t */\r\n\r\n\tvar StaticText = Widget.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tWidget.prototype._construct.call(this, parent, \"div\");\r\n\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\tthis._elm.style.pointerEvents = \"none\";\r\n\t\t\t//this._elm.style.color = Editor.theme.textColor;\r\n\t\t\tthis._elm.style.color = skin.textColor;\r\n\t\t\tthis._elm.style.display = \"flex\";\r\n\r\n\t\t\t/** \r\n\t\t\t * Span DOM element used to represent the text.\r\n\t\t\t *\r\n\t\t\t * @attribute span\r\n\t\t\t * @type {DOM}\r\n\t\t \t */\r\n\t\t\tthis.span = document.createElement(\"span\");\r\n\t\t\tthis.span.style.overflow = \"hidden\";\r\n\t\t\tthis._elm.appendChild(this.span);\r\n\r\n\t\t\t//Text\r\n\t\t\tthis.text = document.createTextNode(\"\");\r\n\t\t\tthis.span.appendChild(this.text);\r\n\r\n\t\t\t/**\r\n\t\t\t * If set to true the text container will automatically fit the text size.\r\n\t\t\t *\r\n\t\t\t * @attribute fitContent\r\n\t\t\t * @type {Boolean}\r\n\t\t\t */\r\n\t\t\tthis.fitContent = false;\r\n\r\n\t\t\tthis.allowWordBreak(false);\r\n\t\t\tthis.setVerticalAlignment(Text.CENTER);\r\n\t\t\tthis.setAlignment(Text.CENTER);\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Set font to use for the text.\r\n\t\t * \r\n\t\t * @method setFont\r\n\t\t * @param {String} fontFamily Font family.\r\n\t\t * @param {Number} fontWeight Font weigth, sets how thick or thin characters in text should be displayed.\r\n\t\t * @param {String} fontStyle Font style, specifies the font style for a text.\r\n\t\t */\r\n\t\tsetFont : function(fontFamily, fontWeight, fontStyle) {\r\n\t\t\tthis.span.style.fontFamily = fontFamily;\r\n\r\n\t\t\tif(fontWeight !== undefined) {\r\n\t\t\t\tthis.span.style.fontWeight = fontWeight;\r\n\t\t\t}\r\n\r\n\t\t\tif(fontStyle !== undefined) {\r\n\t\t\t\tthis.span.style.fontStyle = fontStyle;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Enable of disable word breaking.\r\n\t\t *\r\n\t\t * @method allowWordBreak\r\n\t\t * @param {Boolean} line If true words can be breaked.\r\n\t\t */\r\n\t\tallowWordBreak : function(value) {\r\n\t\t\tif(value === true) {\r\n\t\t\t\tthis.span.style.whiteSpace = \"normal\";\r\n\t\t\t\tthis.span.style.wordBreak = \"break-word\";\r\n\t\t\t} else \t{\r\n\t\t\t\tthis.span.style.whiteSpace = \"pre\";\r\n\t\t\t\tthis.span.style.wordBreak = \"normal\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text.\r\n\t\t *\r\n\t\t * @method setText\r\n\t\t * @param {String} text Text. \r\n\t\t */\r\n\t\tsetText : function(text){\r\n\t\t\tthis.text.data = text;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text border.\r\n\t\t *\r\n\t\t * @method setTextBorder\r\n\t\t * @param {Number} size Border size in pixels.\r\n\t\t * @param {String} color CSS Color. \r\n\t\t */\r\n\t\tsetTextBorder : function(size, color) {\r\n\t\t\tthis.span.style.textShadow = \"-\" + size + \"px 0 \" + color + \", 0 \" + size + \"px \" + color + \", \" + size + \"px 0 \" + color + \", 0 -\" + size + \"px \" + color;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set Text size, in pixels.\r\n\t\t * \r\n\t\t * @method setTextSize\r\n\t\t * @param {Number} size Size in pixel for this text element.\r\n\t\t */\r\n\t\tsetTextSize : function(size) {\r\n\t\t\tthis._elm.style.fontSize = size + \"px\";\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text color.\r\n\t\t * \r\n\t\t * @method setTextColor\r\n\t\t * @param {String} color Color code.\r\n\t\t */\r\n\t\tsetTextColor : function(color) {\r\n\t\t\tthis.span.style.color = color;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text overflow handling\r\n\t\t *\r\n\t\t * @method setOverflow\r\n\t\t * @param {Number} overflow\r\n\t\t */\r\n\t\tsetOverflow : function(overflow) {\r\n\t\t\tif(overflow === Text.ELLIPSIS) {\r\n\t\t\t\tthis.span.style.whiteSpace = \"nowrap\";\r\n\t\t\t\tthis.span.style.textOverflow = \"ellipsis\";\r\n\t\t\t} else \t{\r\n\t\t\t\tthis.span.style.whiteSpace = \"pre\";\r\n\t\t\t\tthis.span.style.textOverflow = \"clip\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text horizontal alignment.\r\n\t\t *  - Text.CENTER\r\n\t\t *  - Text.LEFT\r\n\t\t *  - Text.RIGHT\r\n\t\t * \r\n\t\t * @method setAlignment\r\n\t\t * @param {Number} align Alingment mode.\r\n\t\t */\r\n\t\tsetAlignment : function(align) \t{\r\n\t\t\tif(align === Text.CENTER) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"center\";\r\n\t\t\t\tthis._elm.style.textAlign = \"center\";\r\n\t\t\t} else if(align === Text.LEFT) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"flex-start\";\r\n\t\t\t\tthis._elm.style.textAlign = \"left\";\r\n\t\t\t} else if(align === Text.RIGHT) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"flex-end\";\r\n\t\t\t\tthis._elm.style.textAlign = \"right\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text vertical alignment.\r\n\t\t *  - Text.CENTER\r\n\t\t *  - Text.TOP\r\n\t\t *  - Text.BOTTOM\r\n\t\t * \r\n\t\t * @method setVerticalAlignment\r\n\t\t * @param {Number} align Alingment mode.\r\n\t\t */\r\n\t\tsetVerticalAlignment : function(align) {\r\n\t\t\tif(align === Text.CENTER) {\r\n\t\t\t\tthis._elm.style.alignItems = \"center\";\r\n\t\t\t} else if(align === Text.TOP) {\r\n\t\t \t\tthis._elm.style.alignItems = \"flex-start\";\r\n\t\t\t} else if(align === Text.BOTTOM) {\r\n\t\t\t\tthis._elm.style.alignItems = \"flex-end\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get size of the text inside of this component in px.\r\n\t\t * \r\n\t\t * @method measure\r\n\t\t * @return {Vector2} A vector with the size of the text. \r\n\t\t */\r\n\t\tmeasure : function() \t{\r\n\t\t \treturn new Vector2(this.span.offsetWidth, this.span.offsetHeight);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text internal margin in pixels.\r\n\t\t * \r\n\t\t * @method setMargin\r\n\t\t * @param {Number} margin Margin size in pixels.\r\n\t\t */\r\n\t\tsetMargin : function(margin) {\r\n\t\t\tthis.span.style.margin = margin + \"px\";\r\n\t\t},\r\n\r\n\t\t_updateVisibility : function() {\r\n\t\t\tthis._elm.style.display = this.visible ? \"flex\" : \"none\";\r\n\t\t},\r\n\r\n\t\t_updateSize : function() {\r\n\t\t\tif(this.fitContent) { \r\n\t\t\t\tthis.size.x = this.span.clientWidth;\r\n\t\t\t\tthis.size.y = this.span.clientHeight;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tWidget.prototype._updateSize.call(this);\r\n\t\t}\r\n\r\n\t});\r\n\r\n\tStaticText.CENTER = 0;\r\n\tStaticText.LEFT = 1;\r\n\tStaticText.RIGHT = 2;\r\n\tStaticText.TOP = 3;\r\n\tStaticText.BOTTOM = 4;\r\n\r\n\tStaticText.CLIP = 10;\r\n\tStaticText.ELLIPSIS = 11;\r\n\r\n\treturn texts.StaticText = StaticText;\r\n});"]}