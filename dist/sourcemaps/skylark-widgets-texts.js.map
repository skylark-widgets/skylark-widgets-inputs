{"version":3,"sources":["skylark-widgets-texts.js"],"names":["define","skylark","attach","Widget","texts","TextBox","inherit","_construct","parent","prototype","call","this","skin","getSkin","_elm","type","style","color","textColor","margin","outline","borderStyle","boxSizing","textIndent","borderRadius","setFont","fontFamily","fontWeight","fontStyle","undefined","setDisabled","value","disabled","setOnInput","onInput","timeout","timer","oninput","event","clearTimeout","setTimeout","setOnChange","onChange","onchange","setText","text","getText","PasswordBox","Vector2","StaticText","pointerEvents","display","span","document","createElement","overflow","appendChild","createTextNode","fitContent","allowWordBreak","setVerticalAlignment","Text","CENTER","setAlignment","whiteSpace","wordBreak","data","setTextBorder","size","textShadow","setTextSize","fontSize","setTextColor","setOverflow","ELLIPSIS","textOverflow","align","justifyContent","textAlign","LEFT","RIGHT","alignItems","TOP","BOTTOM","measure","offsetWidth","offsetHeight","setMargin","_updateVisibility","visible","_updateSize","x","clientWidth","y","clientHeight","CLIP","TextArea","resize","backgroundColor","boxColor","font","setWrap","mode","wrap","setValue","getValue","SOFT","HARD","main"],"mappings":"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","file":"../skylark-widgets-texts.js","sourcesContent":["define('skylark-widgets-texts/texts',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark) {\r\n\tvar texts = {};\r\n\r\n\treturn skylark.attach(\"widgets.texts\",texts);\r\n\r\n});\r\n\r\n\ndefine('skylark-widgets-texts/TextBox',[\r\n\t\"skylark-widgets-base/Widget\",\r\n\t\"./texts\"\t\r\n],function(Widget,texts){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * text input widget.\r\n\t * \r\n\t * @class TextBox\r\n\t * @extends {Component}\r\n\t * @param {Component} parent Parent widget.\r\n\t */\r\n\tvar TextBox = Widget.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tWidget.prototype._construct.call(this, parent, \"input\");\r\n\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\tthis._elm.type = \"text\";\r\n\t\t\t//this._elm.style.backgroundColor = Editor.theme.boxColor;\r\n\t\t\tthis._elm.style.color = skin.textColor;\r\n\t\t\tthis._elm.style.margin = \"0\";\r\n\t\t\tthis._elm.style.outline = \"none\";\r\n\t\t\tthis._elm.style.borderStyle = \"none\";\r\n\t\t\tthis._elm.style.boxSizing = \"border-box\";\r\n\t\t\tthis._elm.style.textIndent = \"4px\";\r\n\t\t\tthis._elm.style.borderRadius = \"4px\";\r\n\r\n\t\t\tvar self = this;\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\tthis._elm.oncontextmenu = function(event) {\r\n\t\t\t\tvar context = new ContextMenu(DocumentBody);\r\n\t\t\t\tcontext.size.set(130, 20);\r\n\t\t\t\tcontext.position.set(event.clientX, event.clientY);\r\n\t\t\t\tcontext.addOption(Locale.copy, function()\r\n\t\t\t\t{\r\n\t\t\t\t\tvar value = self.element.value;\r\n\t\t\t\t\tEditor.clipboard.set(value.slice(self.element.selectionStart, self.element.selectionEnd), \"text\");\r\n\t\t\t\t});\r\n\t\t\t\tcontext.addOption(Locale.cut, function()\r\n\t\t\t\t{\r\n\t\t\t\t\tvar value = self.element.value;\r\n\t\t\t\t\tEditor.clipboard.set(value.slice(self.element.selectionStart, self.element.selectionEnd), \"text\");\r\n\t\t\t\t\tself.element.value = value.slice(0, self.element.selectionStart) + value.slice(self.element.selectionEnd, value.length);\r\n\t\t\t\t});\r\n\t\t\t\tcontext.addOption(Locale.paste, function()\r\n\t\t\t\t{\r\n\t\t\t\t\tvar value = self.element.value;\r\n\t\t\t\t\tvar paste = Editor.clipboard.get(\"text\");\r\n\t\t\t\t\tif(paste !== undefined)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tself.element.value = value.slice(0, self.element.selectionStart) + paste + value.slice(self.element.selectionEnd, value.length);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tcontext.addOption(Locale.selectAll, function()\r\n\t\t\t\t{\r\n\t\t\t\t\tconsole.log(self.element);\r\n\t\t\t\t\tself.element.select();\r\n\t\t\t\t});\r\n\t\t\t\tcontext.updateInterface();\r\n\t\t\t};\r\n\t\t\t*/\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Set font configuration to use for the text presented in this component.\r\n\t\t *\r\n\t\t * May also affect some types of children components. \r\n\t\t * \r\n\t\t * @method setFont\r\n\t\t * @param {string} fontFamily Font family.\r\n\t\t * @param {number} fontWeight Font weigth, sets how thick or thin characters in text should be displayed.\r\n\t\t * @param {string} fontStyle Font style, specifies the font style for a text.\r\n\t\t */\r\n\t\tsetFont : function(fontFamily, fontWeight, fontStyle) {\r\n\t\t\tthis._elm.style.fontFamily = fontFamily;\r\n\r\n\t\t\tif(fontWeight !== undefined) {\r\n\t\t\t\tthis._elm.style.fontWeight = fontWeight;\r\n\t\t\t}\r\n\r\n\t\t\tif(fontStyle !== undefined)\t{\r\n\t\t\t\tthis._elm.style.fontStyle = fontStyle;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set the disabled state of the element.\r\n\t\t *\r\n\t\t * @method setDisabled\r\n\t\t * @param {boolean} disabled\r\n\t\t */\r\n\t\tsetDisabled : function(value) {\r\n\t\t\tthis._elm.disabled = value;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set oninput callback called after every letter typed into the box.\r\n\t\t *\r\n\t\t * Should be used only for immediate input effect, or can be used with a timeout value to prevent high CPU usage.\r\n\t\t *\r\n\t\t * @method setOnInput\r\n\t\t * @param {Function} onInput Callback method called everytime the user types something.\r\n\t\t * @param {number} timeout Time (ms) after the user stopped typing to activate the callback.\r\n\t\t */\r\n\t\tsetOnInput : function(onInput, timeout) {\r\n\t\t\tif(timeout !== undefined) {\r\n\t\t\t\tvar timer = null;\r\n\t\t\t\tvar self = this;\r\n\r\n\t\t\t\tthis._elm.oninput = function(event) {\r\n\t\t\t\t\tif(timer !== null) {\r\n\t\t\t\t\t\tclearTimeout(timer);\r\n\t\t\t\t\t\ttimer = null;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttimer = setTimeout(function(){\r\n\t\t\t\t\t\tonInput();\r\n\t\t\t\t\t\ttimer = null;\r\n\t\t\t\t\t}, timeout)\r\n\t\t\t\t};\r\n\t\t\t} else \t{\r\n\t\t\t\tthis._elm.oninput = onInput;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set onchange callback, called after changes.\r\n\t\t *\r\n\t\t * @method setOnChange\r\n\t\t * @param {Function} onChange\r\n\t\t */\r\n\t\tsetOnChange : function(onChange) {\r\n\t\t\tthis._elm.onchange = onChange;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set value stored in the input element.\r\n\t\t *\r\n\t\t * @method setText\r\n\t\t * @param {Object} text\r\n\t\t */\r\n\t\tsetText : function(text) {\r\n\t\t\tthis._elm.value = text;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get text stored in the input element.\r\n\t\t *\r\n\t\t * @method getText\r\n\t\t * @return {string} Text stored in the input element.\r\n\t\t */\r\n\t\tgetText : function() {\r\n\t\t\treturn this._elm.value;\r\n\t\t}\r\n\t});\r\n\r\n\treturn texts.TextBox = TextBox;\r\n});\ndefine('skylark-widgets-texts/PasswordBox',[\n\t\"./texts\",\n\t\"./TextBox\"\n],function(TextBox){\n\t\"use strict\";\n\n\t/**\n\t * password text input widget.\n\t * \n\t * @class PasswordBox\n\t * @extends {TextBox}\n\t * @param {Widget} parent Parent widget.\n\t */\n\tvar PasswordBox = Widget.inherit({\n\n\t\t_construct : function (parent) {\n\t\t\tTextBox.prototype._construct.call(this, parent);\n\n\t\t\tthis._elm.type = \"password\";\n\t\t}\n\t});\n\n\treturn texts.PasswordBox = PasswordBox;\n});\n\ndefine('skylark-widgets-texts/StaticText',[\r\n\t\"skylark-langx-numbers/Vector2\",\r\n\t\"skylark-widgets-base/Widget\",\r\n\t\"./texts\"\r\n],function(\r\n\tVector2,\r\n\tWidget,\r\n\ttexts\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Text element without background.\r\n\t * \r\n\t * @class Text\r\n\t * @extends {Widget}\r\n\t * @param {Widget} parent Parent widget.\r\n\t */\r\n\r\n\tvar StaticText = Widget.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tWidget.prototype._construct.call(this, parent, \"div\");\r\n\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\tthis._elm.style.pointerEvents = \"none\";\r\n\t\t\t//this._elm.style.color = Editor.theme.textColor;\r\n\t\t\tthis._elm.style.color = skin.textColor;\r\n\t\t\tthis._elm.style.display = \"flex\";\r\n\r\n\t\t\t/** \r\n\t\t\t * Span DOM element used to represent the text.\r\n\t\t\t *\r\n\t\t\t * @attribute span\r\n\t\t\t * @type {DOM}\r\n\t\t \t */\r\n\t\t\tthis.span = document.createElement(\"span\");\r\n\t\t\tthis.span.style.overflow = \"hidden\";\r\n\t\t\tthis._elm.appendChild(this.span);\r\n\r\n\t\t\t//Text\r\n\t\t\tthis.text = document.createTextNode(\"\");\r\n\t\t\tthis.span.appendChild(this.text);\r\n\r\n\t\t\t/**\r\n\t\t\t * If set to true the text container will automatically fit the text size.\r\n\t\t\t *\r\n\t\t\t * @attribute fitContent\r\n\t\t\t * @type {Boolean}\r\n\t\t\t */\r\n\t\t\tthis.fitContent = false;\r\n\r\n\t\t\tthis.allowWordBreak(false);\r\n\t\t\tthis.setVerticalAlignment(Text.CENTER);\r\n\t\t\tthis.setAlignment(Text.CENTER);\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Set font to use for the text.\r\n\t\t * \r\n\t\t * @method setFont\r\n\t\t * @param {String} fontFamily Font family.\r\n\t\t * @param {Number} fontWeight Font weigth, sets how thick or thin characters in text should be displayed.\r\n\t\t * @param {String} fontStyle Font style, specifies the font style for a text.\r\n\t\t */\r\n\t\tsetFont : function(fontFamily, fontWeight, fontStyle) {\r\n\t\t\tthis.span.style.fontFamily = fontFamily;\r\n\r\n\t\t\tif(fontWeight !== undefined) {\r\n\t\t\t\tthis.span.style.fontWeight = fontWeight;\r\n\t\t\t}\r\n\r\n\t\t\tif(fontStyle !== undefined) {\r\n\t\t\t\tthis.span.style.fontStyle = fontStyle;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Enable of disable word breaking.\r\n\t\t *\r\n\t\t * @method allowWordBreak\r\n\t\t * @param {Boolean} line If true words can be breaked.\r\n\t\t */\r\n\t\tallowWordBreak : function(value) {\r\n\t\t\tif(value === true) {\r\n\t\t\t\tthis.span.style.whiteSpace = \"normal\";\r\n\t\t\t\tthis.span.style.wordBreak = \"break-word\";\r\n\t\t\t} else \t{\r\n\t\t\t\tthis.span.style.whiteSpace = \"pre\";\r\n\t\t\t\tthis.span.style.wordBreak = \"normal\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text.\r\n\t\t *\r\n\t\t * @method setText\r\n\t\t * @param {String} text Text. \r\n\t\t */\r\n\t\tsetText : function(text){\r\n\t\t\tthis.text.data = text;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text border.\r\n\t\t *\r\n\t\t * @method setTextBorder\r\n\t\t * @param {Number} size Border size in pixels.\r\n\t\t * @param {String} color CSS Color. \r\n\t\t */\r\n\t\tsetTextBorder : function(size, color) {\r\n\t\t\tthis.span.style.textShadow = \"-\" + size + \"px 0 \" + color + \", 0 \" + size + \"px \" + color + \", \" + size + \"px 0 \" + color + \", 0 -\" + size + \"px \" + color;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set Text size, in pixels.\r\n\t\t * \r\n\t\t * @method setTextSize\r\n\t\t * @param {Number} size Size in pixel for this text element.\r\n\t\t */\r\n\t\tsetTextSize : function(size) {\r\n\t\t\tthis._elm.style.fontSize = size + \"px\";\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text color.\r\n\t\t * \r\n\t\t * @method setTextColor\r\n\t\t * @param {String} color Color code.\r\n\t\t */\r\n\t\tsetTextColor : function(color) {\r\n\t\t\tthis.span.style.color = color;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text overflow handling\r\n\t\t *\r\n\t\t * @method setOverflow\r\n\t\t * @param {Number} overflow\r\n\t\t */\r\n\t\tsetOverflow : function(overflow) {\r\n\t\t\tif(overflow === Text.ELLIPSIS) {\r\n\t\t\t\tthis.span.style.whiteSpace = \"nowrap\";\r\n\t\t\t\tthis.span.style.textOverflow = \"ellipsis\";\r\n\t\t\t} else \t{\r\n\t\t\t\tthis.span.style.whiteSpace = \"pre\";\r\n\t\t\t\tthis.span.style.textOverflow = \"clip\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text horizontal alignment.\r\n\t\t *  - Text.CENTER\r\n\t\t *  - Text.LEFT\r\n\t\t *  - Text.RIGHT\r\n\t\t * \r\n\t\t * @method setAlignment\r\n\t\t * @param {Number} align Alingment mode.\r\n\t\t */\r\n\t\tsetAlignment : function(align) \t{\r\n\t\t\tif(align === Text.CENTER) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"center\";\r\n\t\t\t\tthis._elm.style.textAlign = \"center\";\r\n\t\t\t} else if(align === Text.LEFT) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"flex-start\";\r\n\t\t\t\tthis._elm.style.textAlign = \"left\";\r\n\t\t\t} else if(align === Text.RIGHT) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"flex-end\";\r\n\t\t\t\tthis._elm.style.textAlign = \"right\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text vertical alignment.\r\n\t\t *  - Text.CENTER\r\n\t\t *  - Text.TOP\r\n\t\t *  - Text.BOTTOM\r\n\t\t * \r\n\t\t * @method setVerticalAlignment\r\n\t\t * @param {Number} align Alingment mode.\r\n\t\t */\r\n\t\tsetVerticalAlignment : function(align) {\r\n\t\t\tif(align === Text.CENTER) {\r\n\t\t\t\tthis._elm.style.alignItems = \"center\";\r\n\t\t\t} else if(align === Text.TOP) {\r\n\t\t \t\tthis._elm.style.alignItems = \"flex-start\";\r\n\t\t\t} else if(align === Text.BOTTOM) {\r\n\t\t\t\tthis._elm.style.alignItems = \"flex-end\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get size of the text inside of this component in px.\r\n\t\t * \r\n\t\t * @method measure\r\n\t\t * @return {Vector2} A vector with the size of the text. \r\n\t\t */\r\n\t\tmeasure : function() \t{\r\n\t\t \treturn new Vector2(this.span.offsetWidth, this.span.offsetHeight);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text internal margin in pixels.\r\n\t\t * \r\n\t\t * @method setMargin\r\n\t\t * @param {Number} margin Margin size in pixels.\r\n\t\t */\r\n\t\tsetMargin : function(margin) {\r\n\t\t\tthis.span.style.margin = margin + \"px\";\r\n\t\t},\r\n\r\n\t\t_updateVisibility : function() {\r\n\t\t\tthis._elm.style.display = this.visible ? \"flex\" : \"none\";\r\n\t\t},\r\n\r\n\t\t_updateSize : function() {\r\n\t\t\tif(this.fitContent) { \r\n\t\t\t\tthis.size.x = this.span.clientWidth;\r\n\t\t\t\tthis.size.y = this.span.clientHeight;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tWidget.prototype._updateSize.call(this);\r\n\t\t}\r\n\r\n\t});\r\n\r\n\tStaticText.CENTER = 0;\r\n\tStaticText.LEFT = 1;\r\n\tStaticText.RIGHT = 2;\r\n\tStaticText.TOP = 3;\r\n\tStaticText.BOTTOM = 4;\r\n\r\n\tStaticText.CLIP = 10;\r\n\tStaticText.ELLIPSIS = 11;\r\n\r\n\treturn texts.StaticText = StaticText;\r\n});\ndefine('skylark-widgets-texts/TextArea',[\r\n\t\"skylark-widgets-base/Widget\",\r\n\t\"./texts\"\t\r\n],function(Widget,texts){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Text area input is used to handle multi line string values.\r\n\t *\r\n\t * @class TextArea\r\n\t * @extends {Component}\r\n\t */\r\n\tvar TextArea = Widget.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tWidget.prototype._construct.call(this, parent, \"textarea\");\r\n\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\tthis._elm.style.overflow = \"auto\";\r\n\t\t\tthis._elm.style.resize = \"none\";\r\n\t\t\t//this._elm.style.backgroundColor = Editor.theme.boxColor;\r\n\t\t\t//this._elm.style.fontFamily = Editor.theme.font;\r\n\t\t\t//this._elm.style.color = Editor.theme.textColor;\r\n\t\t\tthis._elm.style.backgroundColor = skin.boxColor;\r\n\t\t\tthis._elm.style.fontFamily = skin.font;\r\n\t\t\tthis._elm.style.color = skin.textColor;\r\n\t\t\tthis._elm.style.outline = \"none\";\r\n\t\t\tthis._elm.style.borderStyle = \"none\";\r\n\t\t\tthis._elm.style.boxSizing = \"border-box\";\r\n\t\t\tthis._elm.style.borderRadius = \"4px\";\r\n\r\n\t\t\tvar self = this;\r\n\r\n\t\t\t/*\r\n\t\t\tthis._elm.oncontextmenu = function(event) {\r\n\t\t\t\tvar context = new ContextMenu(DocumentBody);\r\n\t\t\t\tcontext.size.set(130, 20);\r\n\t\t\t\tcontext.position.set(event.clientX, event.clientY);\r\n\t\t\t\tcontext.addOption(Locale.copy, function()\r\n\t\t\t\t{\r\n\t\t\t\t\tvar value = self.element.value;\r\n\t\t\t\t\tEditor.clipboard.set(value.slice(self.element.selectionStart, self.element.selectionEnd), \"text\");\r\n\t\t\t\t});\r\n\t\t\t\tcontext.addOption(Locale.cut, function(){\r\n\t\t\t\t\tvar value = self.element.value;\r\n\t\t\t\t\tEditor.clipboard.set(value.slice(self.element.selectionStart, self.element.selectionEnd), \"text\");\r\n\t\t\t\t\tself.element.value = value.slice(0, self.element.selectionStart) + value.slice(self.element.selectionEnd, value.length);\r\n\t\t\t\t});\r\n\t\t\t\tcontext.addOption(Locale.paste, function() {\r\n\t\t\t\t\tvar value = self.element.value;\r\n\t\t\t\t\tvar paste = Editor.clipboard.get(\"text\");\r\n\t\t\t\t\tif(paste !== undefined)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tself.element.value = value.slice(0, self.element.selectionStart) + paste + value.slice(self.element.selectionEnd, value.length);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tcontext.addOption(Locale.selectAll, function() {\r\n\t\t\t\t\tself.element.select();\r\n\t\t\t\t});\r\n\t\t\t\tcontext.updateInterface();\r\n\t\t\t};\r\n\t\t\t*/\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set font configuration to use for the text presented in this component.\r\n\t\t *\r\n\t\t * May also affect some types of children components. \r\n\t\t * \r\n\t\t * @method setFont\r\n\t\t * @param {string} fontFamily Font family.\r\n\t\t * @param {number} fontWeight Font weigth, sets how thick or thin characters in text should be displayed.\r\n\t\t * @param {string} fontStyle Font style, specifies the font style for a text.\r\n\t\t */\r\n\t\tsetFont : function(fontFamily, fontWeight, fontStyle){\r\n\t\t\tthis._elm.style.fontFamily = fontFamily;\r\n\r\n\t\t\tif(fontWeight !== undefined) {\r\n\t\t\t\tthis._elm.style.fontWeight = fontWeight;\r\n\t\t\t}\r\n\r\n\t\t\tif(fontStyle !== undefined) {\r\n\t\t\t\tthis._elm.style.fontStyle = fontStyle;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set the wrap mode used for this text area.\r\n\t\t *\r\n\t\t * Only affects the value on form submission.\r\n\t\t *\r\n\t\t * @method setWrap\r\n\t\t * @param {string} mode The wrap mode to use.\r\n\t\t */\r\n\t\tsetWrap : function(mode) {\r\n\t\t\tthis._elm.wrap = mode;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set the disabled state of the element.\r\n\t\t *\r\n\t\t * @method setDisabled\r\n\t\t * @param {boolean} disabled\r\n\t\t */\r\n\t\tsetDisabled : function(value) {\r\n\t\t\tthis._elm.disabled = value;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set oninput callback called after every letter typed into the box.\r\n\t\t *\r\n\t\t * Should be used only for immediate input effect, or can be used with a timeout value to prevent high CPU usage.\r\n\t\t *\r\n\t\t * @method setOnInput\r\n\t\t * @param {Function} onInput Callback method called everytime the user types something.\r\n\t\t * @param {number} timeout Time (ms) after the user stopped typing to activate the callback.\r\n\t\t */\r\n\t\tsetOnInput : function(onInput, timeout) {\r\n\t\t\tif(timeout !== undefined) {\r\n\t\t\t\tvar timer = null;\r\n\t\t\t\tvar self = this;\r\n\r\n\t\t\t\tthis._elm.oninput = function(event) {\r\n\t\t\t\t\tif(timer !== null) {\r\n\t\t\t\t\t\tclearTimeout(timer);\r\n\t\t\t\t\t\ttimer = null;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttimer = setTimeout(function() {\r\n\t\t\t\t\t\tonInput();\r\n\t\t\t\t\t\ttimer = null;\r\n\t\t\t\t\t}, timeout)\r\n\t\t\t\t};\r\n\t\t\t} else \t{\r\n\t\t\t\tthis._elm.oninput = onInput;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set onchange callback, called after changes.\r\n\t\t *\r\n\t\t * @method setOnChange\r\n\t\t * @param {Function} onChange\r\n\t\t */\r\n\t\tsetOnChange : function(onChange) {\r\n\t\t\tthis._elm.onchange = onChange;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set value stored in the input element.\r\n\t\t *\r\n\t\t * @method setText\r\n\t\t * @param {Object} text\r\n\t\t */\r\n\t\tsetText : function(text) {\r\n\t\t\tthis._elm.value = text;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get text stored in the input element.\r\n\t\t *\r\n\t\t * @method getText\r\n\t\t * @return {string} Text stored in the input element.\r\n\t\t */\r\n\t\tgetText : function() {\r\n\t\t\treturn this._elm.value;\r\n\t\t}\r\n\t});\r\n\r\n\t/**\r\n\t * Set value stored in the input element. Same as setText().\r\n\t *\r\n\t * @method setValue\r\n\t * @param {Object} text\r\n\t */\r\n\tTextArea.prototype.setValue = TextArea.prototype.setText;\r\n\r\n\t/**\r\n\t * Get text stored in the input element. Same as getText().\r\n\t *\r\n\t * @method getValue\r\n\t * @return {string} Text stored in the input element.\r\n\t */\r\n\tTextArea.prototype.getValue = TextArea.prototype.getText;\r\n\r\n\r\n\t/**\r\n\t * The text in the textarea is not wrapped. This is default.\r\n\t *\r\n\t * @static\r\n\t * @attribute SOFT\r\n\t * @type {string}\r\n\t */\r\n\tTextArea.SOFT = \"soft\";\r\n\r\n\t/**\r\n\t * The text in the textarea is wrapped (contains newlines).\r\n\t *\r\n\t * When \"hard\" is used, the cols attribute must be specified.\r\n\t *\r\n\t * @static\r\n\t * @attribute HARD\r\n\t * @type {string}\r\n\t */\r\n\tTextArea.HARD = \"hard\";\r\n\r\n\treturn texts.TextArea = TextArea;\r\n});\ndefine('skylark-widgets-texts/main',[\r\n\t\"./texts\",\r\n\t\"./PasswordBox\",\r\n\t\"./StaticText\",\r\n\t\"./TextArea\",\r\n\t\"./TextBox\"\r\n],function(texts){\r\n\treturn texts;\r\n});\ndefine('skylark-widgets-texts', ['skylark-widgets-texts/main'], function (main) { return main; });\n\n"]}