{"version":3,"sources":["skylark-widgets-texts.js"],"names":[],"mappingsfile":"../skylark-widgets-texts.js","sourcesContent":["define('skylark-widgets-texts/texts',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark) {\r\n\tvar texts = {};\r\n\r\n\treturn skylark.attach(\"widgets.texts\",texts);\r\n\r\n});\r\n\r\n\ndefine('skylark-widgets-texts/TextBox',[\r\n\t\"skylark-widgets-base/Widget\",\r\n\t\"./texts\"\t\r\n],function(Widget,texts){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * text input widget.\r\n\t * \r\n\t * @class TextBox\r\n\t * @extends {Component}\r\n\t * @param {Component} parent Parent widget.\r\n\t */\r\n\tvar TextBox = Widget.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tWidget.prototype._construct.call(this, parent, \"input\");\r\n\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\tthis._elm.type = \"text\";\r\n\t\t\t//this._elm.style.backgroundColor = Editor.theme.boxColor;\r\n\t\t\tthis._elm.style.color = skin.textColor;\r\n\t\t\tthis._elm.style.margin = \"0\";\r\n\t\t\tthis._elm.style.outline = \"none\";\r\n\t\t\tthis._elm.style.borderStyle = \"none\";\r\n\t\t\tthis._elm.style.boxSizing = \"border-box\";\r\n\t\t\tthis._elm.style.textIndent = \"4px\";\r\n\t\t\tthis._elm.style.borderRadius = \"4px\";\r\n\r\n\t\t\tvar self = this;\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\tthis._elm.oncontextmenu = function(event) {\r\n\t\t\t\tvar context = new ContextMenu(DocumentBody);\r\n\t\t\t\tcontext.size.set(130, 20);\r\n\t\t\t\tcontext.position.set(event.clientX, event.clientY);\r\n\t\t\t\tcontext.addOption(Locale.copy, function()\r\n\t\t\t\t{\r\n\t\t\t\t\tvar value = self.element.value;\r\n\t\t\t\t\tEditor.clipboard.set(value.slice(self.element.selectionStart, self.element.selectionEnd), \"text\");\r\n\t\t\t\t});\r\n\t\t\t\tcontext.addOption(Locale.cut, function()\r\n\t\t\t\t{\r\n\t\t\t\t\tvar value = self.element.value;\r\n\t\t\t\t\tEditor.clipboard.set(value.slice(self.element.selectionStart, self.element.selectionEnd), \"text\");\r\n\t\t\t\t\tself.element.value = value.slice(0, self.element.selectionStart) + value.slice(self.element.selectionEnd, value.length);\r\n\t\t\t\t});\r\n\t\t\t\tcontext.addOption(Locale.paste, function()\r\n\t\t\t\t{\r\n\t\t\t\t\tvar value = self.element.value;\r\n\t\t\t\t\tvar paste = Editor.clipboard.get(\"text\");\r\n\t\t\t\t\tif(paste !== undefined)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tself.element.value = value.slice(0, self.element.selectionStart) + paste + value.slice(self.element.selectionEnd, value.length);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tcontext.addOption(Locale.selectAll, function()\r\n\t\t\t\t{\r\n\t\t\t\t\tconsole.log(self.element);\r\n\t\t\t\t\tself.element.select();\r\n\t\t\t\t});\r\n\t\t\t\tcontext.updateInterface();\r\n\t\t\t};\r\n\t\t\t*/\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Set font configuration to use for the text presented in this component.\r\n\t\t *\r\n\t\t * May also affect some types of children components. \r\n\t\t * \r\n\t\t * @method setFont\r\n\t\t * @param {string} fontFamily Font family.\r\n\t\t * @param {number} fontWeight Font weigth, sets how thick or thin characters in text should be displayed.\r\n\t\t * @param {string} fontStyle Font style, specifies the font style for a text.\r\n\t\t */\r\n\t\tsetFont : function(fontFamily, fontWeight, fontStyle) {\r\n\t\t\tthis._elm.style.fontFamily = fontFamily;\r\n\r\n\t\t\tif(fontWeight !== undefined) {\r\n\t\t\t\tthis._elm.style.fontWeight = fontWeight;\r\n\t\t\t}\r\n\r\n\t\t\tif(fontStyle !== undefined)\t{\r\n\t\t\t\tthis._elm.style.fontStyle = fontStyle;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set the disabled state of the element.\r\n\t\t *\r\n\t\t * @method setDisabled\r\n\t\t * @param {boolean} disabled\r\n\t\t */\r\n\t\tsetDisabled : function(value) {\r\n\t\t\tthis._elm.disabled = value;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set oninput callback called after every letter typed into the box.\r\n\t\t *\r\n\t\t * Should be used only for immediate input effect, or can be used with a timeout value to prevent high CPU usage.\r\n\t\t *\r\n\t\t * @method setOnInput\r\n\t\t * @param {Function} onInput Callback method called everytime the user types something.\r\n\t\t * @param {number} timeout Time (ms) after the user stopped typing to activate the callback.\r\n\t\t */\r\n\t\tsetOnInput : function(onInput, timeout) {\r\n\t\t\tif(timeout !== undefined) {\r\n\t\t\t\tvar timer = null;\r\n\t\t\t\tvar self = this;\r\n\r\n\t\t\t\tthis._elm.oninput = function(event) {\r\n\t\t\t\t\tif(timer !== null) {\r\n\t\t\t\t\t\tclearTimeout(timer);\r\n\t\t\t\t\t\ttimer = null;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttimer = setTimeout(function(){\r\n\t\t\t\t\t\tonInput();\r\n\t\t\t\t\t\ttimer = null;\r\n\t\t\t\t\t}, timeout)\r\n\t\t\t\t};\r\n\t\t\t} else \t{\r\n\t\t\t\tthis._elm.oninput = onInput;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set onchange callback, called after changes.\r\n\t\t *\r\n\t\t * @method setOnChange\r\n\t\t * @param {Function} onChange\r\n\t\t */\r\n\t\tsetOnChange : function(onChange) {\r\n\t\t\tthis._elm.onchange = onChange;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set value stored in the input element.\r\n\t\t *\r\n\t\t * @method setText\r\n\t\t * @param {Object} text\r\n\t\t */\r\n\t\tsetText : function(text) {\r\n\t\t\tthis._elm.value = text;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get text stored in the input element.\r\n\t\t *\r\n\t\t * @method getText\r\n\t\t * @return {string} Text stored in the input element.\r\n\t\t */\r\n\t\tgetText : function() {\r\n\t\t\treturn this._elm.value;\r\n\t\t}\r\n\t});\r\n\r\n\treturn texts.TextBox = TextBox;\r\n});\ndefine('skylark-widgets-texts/PasswordBox',[\n\t\"./texts\",\n\t\"./TextBox\"\n],function(TextBox){\n\t\"use strict\";\n\n\t/**\n\t * password text input widget.\n\t * \n\t * @class PasswordBox\n\t * @extends {TextBox}\n\t * @param {Widget} parent Parent widget.\n\t */\n\tvar PasswordBox = Widget.inherit({\n\n\t\t_construct : function (parent) {\n\t\t\tTextBox.prototype._construct.call(this, parent);\n\n\t\t\tthis._elm.type = \"password\";\n\t\t}\n\t});\n\n\treturn texts.PasswordBox = PasswordBox;\n});\n\ndefine('skylark-widgets-base/mixins/TextMixin',[\r\n\t\"skylark-langx-numerics/Vector2\",\r\n\t\"../Widget\"\r\n],function(\r\n\tVector2,\r\n\tWidget\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Text element without background.\r\n\t * \r\n\t * @class Text\r\n\t * @extends {Widget}\r\n\t * @param {Widget} parent Parent widget.\r\n\t */\r\n\r\n\tvar TextMixin = {\r\n\t\t_buildText : function() {\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\tthis._elm.style.pointerEvents = \"none\";\r\n\t\t\t//this._elm.style.color = Editor.theme.textColor;\r\n\t\t\tthis._elm.style.color = skin.textColor;\r\n\t\t\tthis._elm.style.display = \"flex\";\r\n\r\n\t\t\t/** \r\n\t\t\t * Span DOM element used to represent the text.\r\n\t\t\t *\r\n\t\t\t * @attribute span\r\n\t\t\t * @type {DOM}\r\n\t\t \t */\r\n\t\t\tthis.span = document.createElement(\"span\");\r\n\t\t\tthis.span.style.overflow = \"hidden\";\r\n\t\t\tthis._elm.appendChild(this.span);\r\n\r\n\t\t\t//Text\r\n\t\t\tthis.text = document.createTextNode(\"\");\r\n\t\t\tthis.span.appendChild(this.text);\r\n\r\n\t\t\t/**\r\n\t\t\t * If set to true the text container will automatically fit the text size.\r\n\t\t\t *\r\n\t\t\t * @attribute fitContent\r\n\t\t\t * @type {Boolean}\r\n\t\t\t */\r\n\t\t\tthis.fitContent = false;\r\n\r\n\t\t\tthis.allowWordBreak(false);\r\n\t\t\tthis.setVerticalAlignment(TextMixin.CENTER);\r\n\t\t\tthis.setAlignment(TextMixin.CENTER);\t\t\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set font to use for the text.\r\n\t\t * \r\n\t\t * @method setFont\r\n\t\t * @param {String} fontFamily Font family.\r\n\t\t * @param {Number} fontWeight Font weigth, sets how thick or thin characters in text should be displayed.\r\n\t\t * @param {String} fontStyle Font style, specifies the font style for a text.\r\n\t\t */\r\n\t\tsetFont : function(fontFamily, fontWeight, fontStyle) {\r\n\t\t\tthis.span.style.fontFamily = fontFamily;\r\n\r\n\t\t\tif(fontWeight !== undefined) {\r\n\t\t\t\tthis.span.style.fontWeight = fontWeight;\r\n\t\t\t}\r\n\r\n\t\t\tif(fontStyle !== undefined) {\r\n\t\t\t\tthis.span.style.fontStyle = fontStyle;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Enable of disable word breaking.\r\n\t\t *\r\n\t\t * @method allowWordBreak\r\n\t\t * @param {Boolean} line If true words can be breaked.\r\n\t\t */\r\n\t\tallowWordBreak : function(value) {\r\n\t\t\tif(value === true) {\r\n\t\t\t\tthis.span.style.whiteSpace = \"normal\";\r\n\t\t\t\tthis.span.style.wordBreak = \"break-word\";\r\n\t\t\t} else \t{\r\n\t\t\t\tthis.span.style.whiteSpace = \"pre\";\r\n\t\t\t\tthis.span.style.wordBreak = \"normal\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text.\r\n\t\t *\r\n\t\t * @method setText\r\n\t\t * @param {String} text Text. \r\n\t\t */\r\n\t\tsetText : function(text){\r\n\t\t\tthis.text.data = text;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text border.\r\n\t\t *\r\n\t\t * @method setTextBorder\r\n\t\t * @param {Number} size Border size in pixels.\r\n\t\t * @param {String} color CSS Color. \r\n\t\t */\r\n\t\tsetTextBorder : function(size, color) {\r\n\t\t\tthis.span.style.textShadow = \"-\" + size + \"px 0 \" + color + \", 0 \" + size + \"px \" + color + \", \" + size + \"px 0 \" + color + \", 0 -\" + size + \"px \" + color;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set Text size, in pixels.\r\n\t\t * \r\n\t\t * @method setTextSize\r\n\t\t * @param {Number} size Size in pixel for this text element.\r\n\t\t */\r\n\t\tsetTextSize : function(size) {\r\n\t\t\tthis._elm.style.fontSize = size + \"px\";\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text color.\r\n\t\t * \r\n\t\t * @method setTextColor\r\n\t\t * @param {String} color Color code.\r\n\t\t */\r\n\t\tsetTextColor : function(color) {\r\n\t\t\tthis.span.style.color = color;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text overflow handling\r\n\t\t *\r\n\t\t * @method setOverflow\r\n\t\t * @param {Number} overflow\r\n\t\t */\r\n\t\tsetOverflow : function(overflow) {\r\n\t\t\tif(overflow === TextMixin.ELLIPSIS) {\r\n\t\t\t\tthis.span.style.whiteSpace = \"nowrap\";\r\n\t\t\t\tthis.span.style.textOverflow = \"ellipsis\";\r\n\t\t\t} else \t{\r\n\t\t\t\tthis.span.style.whiteSpace = \"pre\";\r\n\t\t\t\tthis.span.style.textOverflow = \"clip\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text horizontal alignment.\r\n\t\t *  - TextMixin.CENTER\r\n\t\t *  - TextMixin.LEFT\r\n\t\t *  - TextMixin.RIGHT\r\n\t\t * \r\n\t\t * @method setAlignment\r\n\t\t * @param {Number} align Alingment mode.\r\n\t\t */\r\n\t\tsetAlignment : function(align) \t{\r\n\t\t\tif(align === TextMixin.CENTER) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"center\";\r\n\t\t\t\tthis._elm.style.textAlign = \"center\";\r\n\t\t\t} else if(align === TextMixin.LEFT) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"flex-start\";\r\n\t\t\t\tthis._elm.style.textAlign = \"left\";\r\n\t\t\t} else if(align === TextMixin.RIGHT) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"flex-end\";\r\n\t\t\t\tthis._elm.style.textAlign = \"right\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text vertical alignment.\r\n\t\t *  - TextMixin.CENTER\r\n\t\t *  - TextMixin.TOP\r\n\t\t *  - TextMixin.BOTTOM\r\n\t\t * \r\n\t\t * @method setVerticalAlignment\r\n\t\t * @param {Number} align Alingment mode.\r\n\t\t */\r\n\t\tsetVerticalAlignment : function(align) {\r\n\t\t\tif(align === TextMixin.CENTER) {\r\n\t\t\t\tthis._elm.style.alignItems = \"center\";\r\n\t\t\t} else if(align === TextMixin.TOP) {\r\n\t\t \t\tthis._elm.style.alignItems = \"flex-start\";\r\n\t\t\t} else if(align === TextMixin.BOTTOM) {\r\n\t\t\t\tthis._elm.style.alignItems = \"flex-end\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get size of the text inside of this component in px.\r\n\t\t * \r\n\t\t * @method measure\r\n\t\t * @return {Vector2} A vector with the size of the text. \r\n\t\t */\r\n\t\tmeasure : function() \t{\r\n\t\t \treturn new Vector2(this.span.offsetWidth, this.span.offsetHeight);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text internal margin in pixels.\r\n\t\t * \r\n\t\t * @method setMargin\r\n\t\t * @param {Number} margin Margin size in pixels.\r\n\t\t */\r\n\t\tsetMargin : function(margin) {\r\n\t\t\tthis.span.style.margin = margin + \"px\";\r\n\t\t},\r\n\r\n\t\tupdateSize : function() {\r\n\t\t\tif(this.fitContent) { \r\n\t\t\t\tthis.size.x = this.span.clientWidth;\r\n\t\t\t\tthis.size.y = this.span.clientHeight;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tWidget.prototype.updateSize.call(this);\r\n\t\t},\r\n\r\n\t\tCENTER : 0,\r\n\t\tLEFT : 1,\r\n\t    RIGHT : 2,\r\n\t    TOP : 3,\r\n\t    BOTTOM : 4,\r\n\r\n\t    CLIP : 10,\r\n\t    ELLIPSIS : 11\r\n\r\n\t};\r\n\r\n\r\n\treturn TextMixin;\r\n});\ndefine('skylark-widgets-texts/TextLabel',[\r\n\t\"skylark-widgets-base/Widget\",\r\n\t\"skylark-widgets-base/mixins/TextMixin\",\r\n\t\"./texts\"\r\n],function(\r\n\tWidget,\r\n\tTextMixin,\r\n\ttexts\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Text element without background.\r\n\t * \r\n\t * @class Text\r\n\t * @extends {Widget}\r\n\t * @param {Widget} parent Parent widget.\r\n\t */\r\n\r\n\tvar TextLabel = Widget.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tWidget.prototype._construct.call(this, parent, \"div\");\r\n\r\n\t\t\tthis._buildTextSpan();\r\n\t\t},\r\n\r\n\r\n\t\t...TextMixin\r\n\r\n\t});\r\n\r\n\tTextLabel.CENTER = TextMixin.CENTER; // 0;\r\n\tTextLabel.LEFT = TextMixin.LEFT; // 1;\r\n\tTextLabel.RIGHT = TextMixin.RIGHT; // 2;\r\n\tTextLabel.TOP = TextMixin.TOP; // 3;\r\n\tTextLabel.BOTTOM = TextMixin.BOTTOM; // 4;\r\n\r\n\tTextLabel.CLIP = TextMixin.CLIP; // 10;\r\n\tTextLabel.ELLIPSIS = TextMixin.ELLIPSIS; //11;\r\n\r\n\treturn texts.TextLabel = TextLabel;\r\n});\ndefine('skylark-widgets-texts/TextArea',[\r\n\t\"skylark-widgets-base/Widget\",\r\n\t\"./texts\"\t\r\n],function(Widget,texts){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Text area input is used to handle multi line string values.\r\n\t *\r\n\t * @class TextArea\r\n\t * @extends {Component}\r\n\t */\r\n\tvar TextArea = Widget.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tWidget.prototype._construct.call(this, parent, \"textarea\");\r\n\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\tthis._elm.style.overflow = \"auto\";\r\n\t\t\tthis._elm.style.resize = \"none\";\r\n\t\t\t//this._elm.style.backgroundColor = Editor.theme.boxColor;\r\n\t\t\t//this._elm.style.fontFamily = Editor.theme.font;\r\n\t\t\t//this._elm.style.color = Editor.theme.textColor;\r\n\t\t\tthis._elm.style.backgroundColor = skin.boxColor;\r\n\t\t\tthis._elm.style.fontFamily = skin.font;\r\n\t\t\tthis._elm.style.color = skin.textColor;\r\n\t\t\tthis._elm.style.outline = \"none\";\r\n\t\t\tthis._elm.style.borderStyle = \"none\";\r\n\t\t\tthis._elm.style.boxSizing = \"border-box\";\r\n\t\t\tthis._elm.style.borderRadius = \"4px\";\r\n\r\n\t\t\tvar self = this;\r\n\r\n\t\t\t/*\r\n\t\t\tthis._elm.oncontextmenu = function(event) {\r\n\t\t\t\tvar context = new ContextMenu(DocumentBody);\r\n\t\t\t\tcontext.size.set(130, 20);\r\n\t\t\t\tcontext.position.set(event.clientX, event.clientY);\r\n\t\t\t\tcontext.addOption(Locale.copy, function()\r\n\t\t\t\t{\r\n\t\t\t\t\tvar value = self.element.value;\r\n\t\t\t\t\tEditor.clipboard.set(value.slice(self.element.selectionStart, self.element.selectionEnd), \"text\");\r\n\t\t\t\t});\r\n\t\t\t\tcontext.addOption(Locale.cut, function(){\r\n\t\t\t\t\tvar value = self.element.value;\r\n\t\t\t\t\tEditor.clipboard.set(value.slice(self.element.selectionStart, self.element.selectionEnd), \"text\");\r\n\t\t\t\t\tself.element.value = value.slice(0, self.element.selectionStart) + value.slice(self.element.selectionEnd, value.length);\r\n\t\t\t\t});\r\n\t\t\t\tcontext.addOption(Locale.paste, function() {\r\n\t\t\t\t\tvar value = self.element.value;\r\n\t\t\t\t\tvar paste = Editor.clipboard.get(\"text\");\r\n\t\t\t\t\tif(paste !== undefined)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tself.element.value = value.slice(0, self.element.selectionStart) + paste + value.slice(self.element.selectionEnd, value.length);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tcontext.addOption(Locale.selectAll, function() {\r\n\t\t\t\t\tself.element.select();\r\n\t\t\t\t});\r\n\t\t\t\tcontext.updateInterface();\r\n\t\t\t};\r\n\t\t\t*/\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set font configuration to use for the text presented in this component.\r\n\t\t *\r\n\t\t * May also affect some types of children components. \r\n\t\t * \r\n\t\t * @method setFont\r\n\t\t * @param {string} fontFamily Font family.\r\n\t\t * @param {number} fontWeight Font weigth, sets how thick or thin characters in text should be displayed.\r\n\t\t * @param {string} fontStyle Font style, specifies the font style for a text.\r\n\t\t */\r\n\t\tsetFont : function(fontFamily, fontWeight, fontStyle){\r\n\t\t\tthis._elm.style.fontFamily = fontFamily;\r\n\r\n\t\t\tif(fontWeight !== undefined) {\r\n\t\t\t\tthis._elm.style.fontWeight = fontWeight;\r\n\t\t\t}\r\n\r\n\t\t\tif(fontStyle !== undefined) {\r\n\t\t\t\tthis._elm.style.fontStyle = fontStyle;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set the wrap mode used for this text area.\r\n\t\t *\r\n\t\t * Only affects the value on form submission.\r\n\t\t *\r\n\t\t * @method setWrap\r\n\t\t * @param {string} mode The wrap mode to use.\r\n\t\t */\r\n\t\tsetWrap : function(mode) {\r\n\t\t\tthis._elm.wrap = mode;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set the disabled state of the element.\r\n\t\t *\r\n\t\t * @method setDisabled\r\n\t\t * @param {boolean} disabled\r\n\t\t */\r\n\t\tsetDisabled : function(value) {\r\n\t\t\tthis._elm.disabled = value;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set oninput callback called after every letter typed into the box.\r\n\t\t *\r\n\t\t * Should be used only for immediate input effect, or can be used with a timeout value to prevent high CPU usage.\r\n\t\t *\r\n\t\t * @method setOnInput\r\n\t\t * @param {Function} onInput Callback method called everytime the user types something.\r\n\t\t * @param {number} timeout Time (ms) after the user stopped typing to activate the callback.\r\n\t\t */\r\n\t\tsetOnInput : function(onInput, timeout) {\r\n\t\t\tif(timeout !== undefined) {\r\n\t\t\t\tvar timer = null;\r\n\t\t\t\tvar self = this;\r\n\r\n\t\t\t\tthis._elm.oninput = function(event) {\r\n\t\t\t\t\tif(timer !== null) {\r\n\t\t\t\t\t\tclearTimeout(timer);\r\n\t\t\t\t\t\ttimer = null;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttimer = setTimeout(function() {\r\n\t\t\t\t\t\tonInput();\r\n\t\t\t\t\t\ttimer = null;\r\n\t\t\t\t\t}, timeout)\r\n\t\t\t\t};\r\n\t\t\t} else \t{\r\n\t\t\t\tthis._elm.oninput = onInput;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set onchange callback, called after changes.\r\n\t\t *\r\n\t\t * @method setOnChange\r\n\t\t * @param {Function} onChange\r\n\t\t */\r\n\t\tsetOnChange : function(onChange) {\r\n\t\t\tthis._elm.onchange = onChange;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set value stored in the input element.\r\n\t\t *\r\n\t\t * @method setText\r\n\t\t * @param {Object} text\r\n\t\t */\r\n\t\tsetText : function(text) {\r\n\t\t\tthis._elm.value = text;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get text stored in the input element.\r\n\t\t *\r\n\t\t * @method getText\r\n\t\t * @return {string} Text stored in the input element.\r\n\t\t */\r\n\t\tgetText : function() {\r\n\t\t\treturn this._elm.value;\r\n\t\t}\r\n\t});\r\n\r\n\t/**\r\n\t * Set value stored in the input element. Same as setText().\r\n\t *\r\n\t * @method setValue\r\n\t * @param {Object} text\r\n\t */\r\n\tTextArea.prototype.setValue = TextArea.prototype.setText;\r\n\r\n\t/**\r\n\t * Get text stored in the input element. Same as getText().\r\n\t *\r\n\t * @method getValue\r\n\t * @return {string} Text stored in the input element.\r\n\t */\r\n\tTextArea.prototype.getValue = TextArea.prototype.getText;\r\n\r\n\r\n\t/**\r\n\t * The text in the textarea is not wrapped. This is default.\r\n\t *\r\n\t * @static\r\n\t * @attribute SOFT\r\n\t * @type {string}\r\n\t */\r\n\tTextArea.SOFT = \"soft\";\r\n\r\n\t/**\r\n\t * The text in the textarea is wrapped (contains newlines).\r\n\t *\r\n\t * When \"hard\" is used, the cols attribute must be specified.\r\n\t *\r\n\t * @static\r\n\t * @attribute HARD\r\n\t * @type {string}\r\n\t */\r\n\tTextArea.HARD = \"hard\";\r\n\r\n\treturn texts.TextArea = TextArea;\r\n});\ndefine('skylark-widgets-texts/main',[\r\n\t\"./texts\",\r\n\t\"./PasswordBox\",\r\n\t\"./TextLabel\",\r\n\t\"./TextArea\",\r\n\t\"./TextBox\"\r\n],function(texts){\r\n\treturn texts;\r\n});\ndefine('skylark-widgets-texts', ['skylark-widgets-texts/main'], function (main) { return main; });\n\n"]}